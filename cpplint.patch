diff --git a/wpiformat/wpiformat/cpplint.py b/wpiformat/wpiformat/cpplint.py
--- a/wpiformat/wpiformat/cpplint.py
+++ b/wpiformat/wpiformat/cpplint.py
@@ -1367,10 +1367,10 @@ def _ShouldPrintError(category, confidence, linenum):
   is_filtered = False
   for one_filter in _Filters():
     if one_filter.startswith('-'):
-      if category.startswith(one_filter[1:]):
+      if category == one_filter[1:]:
         is_filtered = True
     elif one_filter.startswith('+'):
-      if category.startswith(one_filter[1:]):
+      if category == one_filter[1:]:
         is_filtered = False
     else:
       assert False  # should have been checked for in SetFilter.
@@ -4633,7 +4633,8 @@ def _ClassifyInclude(fileinfo, include, is_system):
   is_cpp_h = include in _CPP_HEADERS
 
   # Headers with C++ extensions shouldn't be considered C system headers
-  if is_system and os.path.splitext(include)[1] in ['.hpp', '.hxx', '.h++']:
+  if is_system and os.path.splitext(include)[1] in ['.hh', '.hpp', '.hxx',
+                                                    '.h++']:
       is_system = False
 
   if is_system:
@@ -4734,8 +4735,10 @@ def CheckIncludeLine(filename, clean_lines, linenum, include_state, error):
       # using a number of techniques. The include_state object keeps
       # track of the highest type seen, and complains if we see a
       # lower type after that.
-      error_message = include_state.CheckNextIncludeOrder(
-          _ClassifyInclude(fileinfo, include, is_system))
+      error_message = 0
+      if not IsErrorSuppressedByNolint("build/include_order", linenum):
+        error_message = include_state.CheckNextIncludeOrder(
+            _ClassifyInclude(fileinfo, include, is_system))
       if error_message:
         error(filename, linenum, 'build/include_order', 4,
               '%s. Should be: %s.h, c system, c++ system, other.' %
@@ -5365,8 +5368,11 @@ def CheckCasts(filename, clean_lines, linenum, error):
             matched_type)
 
   if not expecting_function:
+    # This doesn't check for short, long, or long long integer casts because
+    # they are disallowed by other lint rules.
     CheckCStyleCast(filename, clean_lines, linenum, 'static_cast',
-                    r'\((int|float|double|bool|char|u?int(16|32|64))\)', error)
+                    r'\((unsigned|(unsigned )?(char|int)|float|double|bool|'
+                    r'u?int(8|16|32|64)(_t)?)\)', error)
 
   # This doesn't catch all cases. Consider (const char * const)"hello".
   #
@@ -5378,7 +5384,7 @@ def CheckCasts(filename, clean_lines, linenum, error):
   else:
     # Check pointer casts for other than string constants
     CheckCStyleCast(filename, clean_lines, linenum, 'reinterpret_cast',
-                    r'\((\w+\s?\*+\s?)\)', error)
+                    r'\(((const )?\w+\s?\*+\s?(const)?)\)', error)
 
   # In addition, we look for people taking the address of a cast.  This
   # is dangerous -- casts can assign to temporaries, so the pointer doesn't
